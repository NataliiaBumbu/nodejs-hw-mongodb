openapi: 3.1.0
info:
  version: 1.0.0
  title: Contacts API
  description: API for managing contacts with CRUD operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://nodejs-hw-mongodb-35q8.onrender.com
    description: Production server
tags:
  - name: Contacts
    description: Operations related to contacts
paths:
  /contacts:
    get:
      tags:
  - Contacts
summary: Retrieve a List of Contacts
operationId: getContacts
security:
  - bearerAuth: []
parameters:
  - in: query
    name: page
    schema:
      type: integer
    example: 1
  - in: query
    name: perPage
    schema:
      type: integer
    example: 10
  - in: query
    name: sortBy
    schema:
      type: string
    example: 'createdAt'
    description: |
      **Sorting Field**
  - in: query
    name: sortOrder
    schema:
      type: string
      enum: ['asc', 'desc']
    example: 'asc'
    description: |
      **Sorting Order**
  - in: query
    name: isFavorite
    schema:
      type: boolean
    example: true
  - in: query
    name: contactType
    schema:
      type: string
      enum: ['work', 'home', 'personal']
    example: personal
responses:
  '200':
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 200
              description: HTTP status code
            message:
              type: string
              example: Successfully retrieved contacts!
              description: Confirmation message indicating successful retrieval
            data:
              type: object
              required:
                - data
                - page
                - perPage
                - totalItems
                - totalPages
                - hasNextPage
                - hasPreviousPage
              properties:
                data:
                  type: array
                  items:
                    type: object
                    allOf:
                      - $ref: '../../components/schemas/contact.yaml'
                      - type: object
                        properties:
                          _id:
                            type: string
                            example: 66cb5f4d0318528063e77c98
                            description: Unique identifier for the contact
                          createdAt:
                            type: string
                            format: date-time
                            example: '2024-12-29T20:39:40.775Z'
                            description: The date and time when the contact was created
                          updatedAt:
                            type: string
                            format: date-time
                            example: '2024-12-29T20:39:40.775Z'
                            description: The date and time when the contact was last updated
                page:
                  type: integer
                  example: 1
                  description: Current page number
                perPage:
                  type: integer
                  example: 10
                  description: Number of contacts per page
                totalItems:
                  type: integer
                  example: 4
                  description: Total number of contacts matching the query
                totalPages:
                  type: integer
                  example: 1
                  description: Total number of pages available
                hasNextPage:
                  type: boolean
                  example: false
                  description: Whether there are more pages available after the current page
                hasPreviousPage:
                  type: boolean
                  example: false
                  description: Whether there are pages available before the current page

  '401':
    $ref: ../../components/responses/401.yaml

  '404':
    $ref: ../../components/responses/404.yaml
   post:
     tags:
    - Contacts
summary: Create a New Contact
operationId: createContact
security:
  - bearerAuth: []
requestBody:
  content:
    multipart/form-data:
      schema:
        type: object
        required:
          - name
          - phoneNumber
          - contactType
        properties:
          name:
            type: string
            description: 'The full name of the contact.'
            example: 'Nik Brook'
          phoneNumber:
            type: string
            description: "The contact's phone number, including country code if necessary."
            example: '+38000000899'
          email:
            type: string
            description: "The contact's email address. This is optional."
            example: 'nik@example.com'
          isFavorite:
            type: boolean
            description: 'Indicates whether the contact is marked as a favorite.'
            example: false
          contactType:
            type: string
            description: "The type of the contact. It can be 'work', 'home', or 'personal'."
            enum: ['work', 'home', 'personal']
            example: 'personal'
          photo:
            type: string
            format: binary
responses:
  '201':
    description: |
      **Contact Successfully Created**
      The contact was created successfully. The response contains details of the newly created contact.
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 201
              description: HTTP status code
            message:
              type: string
              example: Successfully created a contact!
              description: Confirmation message indicating successful creation
            data:
              allOf: 
                - $ref: '../../components/schemas/contact.yaml'
                - type: object
                  properties:
                    _id:
                      type: string
                      example: 66cb5f4d0318528063e77c98
                      description: Unique identifier for the created contact
                    createdAt:
                      type: string
                      format: date-time
                      example: '2024-12-29T20:39:40.775Z'
                      description: The date and time when the contact was created
                    updatedAt:
                      type: string
                      format: date-time
                      example: '2024-12-29T20:39:40.775Z'
                      description: The date and time when the contact was last updated
  '400':
    description: Bad Request - Invalid or missing required fields
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 400
              description: HTTP status code
            message:
              type: string
              example: BadRequestError
              description: Error message indicating the nature of the bad request
            data:
              type: object
              properties:
                message:
                  type: string
                  example: 'Bad request, body parameters are incorrect'
                  description: Detailed error message
                errors:
                  type: string
                  example: "'name' is a required field; 'phoneNumber' is a required field; 'contactType' is a required field"
                  description: List of validation errors
          required:
            - status
            - message
            - data
  '401':
    $ref: ../../components/responses/401.yaml
  '500':
    description: InternalServerError
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 500
            message:
              type: string
              example: 'InternalServerError'
            data:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: 'Failed to save photo, please try again later.'         
  /contacts/{id}:
    get:
     tags:
  - Contacts
summary: Retrieve a Contact by ID
operationId: getContact
description: |
  **Retrieve a specific contact by its unique identifier.**
security:
  - bearerAuth: []
parameters:
  - in: path
    name: id
    required: true
    schema:
      type: string
      example: '66cb5f4d0318528063e77c98'
responses:
  '200':
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 200
              description: HTTP status code
            message:
              type: string
              example: Successfully found contact with id 66cb5f4d0318528063e77c98!
              description: Human-readable message confirming the retrieval of the contact
            data:
              type: object
              $ref: '../../../components/schemas/contact.yaml'
              description: The contact object containing all details

  '401':
    $ref: ../../../components/responses/401.yaml

  '404':
    description: |
      **Contact Not Found**
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 404
            message:
              type: string
              example: 'NotFoundError'
            data:
              type: object
              required:
                - message
                - errors
              properties:
                message:
                  type: string
                  example: 'Contact not found'
    patch:
      tags:
  - Contacts
summary: Delete an Existing Contact
operationId: deleteContact
description: |
  **Delete an Existing Contact**
security:
  - bearerAuth: []
parameters:
  - in: path
    name: id
    required: true
    schema:
      type: string
    description: 'The unique identifier of the contact to be deleted.'
    example: '66cb5f4d0318528063e77c98'

responses:
  '204':
    description: |
      **No Content**

      The contact was successfully deleted. There is no content in the response body, only the status code 204 indicating a successful deletion.

    content: {}

  '400':
    description: |
      **Bad Request**

      The request was invalid or contained errors. Ensure that the `contactId` provided is correct.

      - **message**: Detailed error message.

    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 400
              description: 'HTTP status code indicating a bad request'
            message:
              type: string
              example: BadRequestError
              description: 'Error message indicating the nature of the bad request'
            data:
              type: object
              properties:
                message:
                  type: string
                  example: 'Invalid contactId provided'
                  description: 'Detailed error message'

  '401':
    $ref: ../../../components/responses/401.yaml

  '404':
    description: |
      **Not Found**

      The contact could not be found. Verify that the `contactId` provided is correct.

      - **message**: Detailed message about the missing contact.

    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 404
              description: 'HTTP status code indicating that the resource was not found'
            message:
              type: string
              example: NotFoundError
              description: 'Error message indicating that the contact was not found'
            data:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: 'Contact not found'
                  description: 'Detailed message about the missing contact'
          
    delete:
tags:
  - Contacts
summary: Delete an Existing Contact
operationId: deleteContact
description: |
  **Delete an Existing Contact**
security:
  - bearerAuth: []
parameters:
  - in: path
    name: id
    required: true
    schema:
      type: string
    description: 'The unique identifier of the contact to be deleted.'
    example: '66cb5f4d0318528063e77c98'

responses:
  '204':
    description: |
      **No Content**

      The contact was successfully deleted. There is no content in the response body, only the status code 204 indicating a successful deletion.

    content: {}

  '400':
    description: |
      **Bad Request**

      The request was invalid or contained errors. Ensure that the `contactId` provided is correct.

      - **message**: Detailed error message.

    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 400
              description: 'HTTP status code indicating a bad request'
            message:
              type: string
              example: BadRequestError
              description: 'Error message indicating the nature of the bad request'
            data:
              type: object
              properties:
                message:
                  type: string
                  example: 'Invalid contactId provided'
                  description: 'Detailed error message'

  '401':
    $ref: ../../../components/responses/401.yaml

  '404':
    description: |
      **Not Found**

      The contact could not be found. Verify that the `contactId` provided is correct.

      - **message**: Detailed message about the missing contact.

    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 404
              description: 'HTTP status code indicating that the resource was not found'
            message:
              type: string
              example: NotFoundError
              description: 'Error message indicating that the contact was not found'
            data:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: 'Contact not found'
                  description: 'Detailed message about the missing contact'components:
  schemas:
 type: object
required:
  - name
  - phoneNumber
  - contactType
properties:
  _id:
    type: string
    description: "Unique identifier for the contact"
    example: "675174e6581cd3520ccd8ca1"
  name:
    description: 'The full name of the contact'
    type: string
    example: 'Test User'

  phoneNumber:
    description: "The contact's phone number"
    type: string
    example: '+123456789'

  email:
    description: "The contact's email address"
    type: string
    example: 'test@example.com'

  isFavorite:
    description: 'Indicates whether the contact is marked as a favorite'
    type: boolean
    example: true

  contactType:
    description: 'The category of the contact (e.g., work, home, personal)'
    type: string
    enum:
      - work
      - home
      - personal
    example: 'personal'

  userId:
    description: 'The ID of the user who owns this contact'
    type: string
    example: '67583381326117753aaf9cc4'

  photo:
    description: "URL to the contact's photo"
    type: string
    example: 'https://res.cloudinary.com/dhkc3livf/image/upload/v1735306214/contacts_photos/vrzest0qncrynauvxubo.jpg'   
  responses:
    201:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Operation successful"
    204:
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contact successfully deleted"
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid input data"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized access"
    404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"
