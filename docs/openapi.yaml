openapi: 3.1.0
info:
  version: 1.0.0
  title: Contacts API
  description: API for managing contacts with CRUD operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://nodejs-hw-mongodb-35q8.onrender.com
    description: Production server
tags:
  - name: Contacts
    description: Operations related to contacts
paths:
  /contacts:
    get:
      tags:
        - Contacts
      summary: Get list of contacts
      description: Retrieve a list of contacts with optional query parameters
      parameters:
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            example: 1
          description: Page number for pagination
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            example: 10
          description: Number of contacts per page
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            example: "name"
          description: Field by which to sort contacts (e.g., name, email)
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            example: "asc"
          description: Sort order (ascending or descending)
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
    post:
      tags:
        - Contacts
      summary: Create a new contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Full name of the contact"
                  example: "John Doe"
                phoneNumber:
                  type: string
                  description: "The contact's phone number"
                  example: "+123456789"
                email:
                  type: string
                  description: "The contact's email address"
                  example: "john.doe@example.com"
                isFavourite:
                  type: boolean
                  description: "Indicates whether the contact is a favorite"
                  example: true
                contactType:
                  type: string
                  description: "The category of the contact"
                  enum:
                    - work
                    - home
                    - personal
                  example: "work"
                photo:
                  type: string
                  description: "URL to the contact's photo"
                  example: "https://res.cloudinary.com/dg5fttpzf/image/upload/v1724604273/vnytdl8f8xwylaaaud6b.jpg"
              required:
                - name
                - phoneNumber
                - email
                - contactType
      responses:
        '201':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get contact by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Contacts
      summary: Update contact by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: "Unique identifier of the contact"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Full name of the contact"
                  example: "Updated User"
                phoneNumber:
                  type: string
                  description: "The contact's phone number"
                  example: "+380987654321"
                email:
                  type: string
                  description: "The contact's email address"
                  example: "updated.email@example.com"
                isFavourite:
                  type: boolean
                  description: "Indicates whether the contact is a favorite"
                  example: false
                contactType:
                  type: string
                  description: "The category of the contact"
                  enum:
                    - work
                    - home
                    - personal
                  example: "home"
                photo:
                  type: string
                  description: "URL to the contact's photo"
                  example: "https://res.cloudinary.com/dg5fttpzf/image/upload/v1724604273/vnytdl8f8xwylaaaud6b.jpg"
              required:
                - name
                - phoneNumber
                - email
                - contactType
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Contacts
      summary: Delete contact by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
components:
  schemas:
    Contact:
      type: object
      required:
        - name
        - phoneNumber
        - email
        - contactType
      properties:
        _id:
          type: string
          description: "Unique identifier for the contact"
          example: "675174e6581cd3520ccd8ca1"
        name:
          type: string
          description: "The full name of the contact"
          example: "Test User"
        phoneNumber:
          type: string
          description: "The contact's phone number"
          example: "+123456789"
        email:
          type: string
          description: "The contact's email address"
          example: "test@example.com"
        isFavourite:
          type: boolean
          description: "Indicates whether the contact is a favorite"
          example: true
        contactType:
          type: string
          description: "The category of the contact"
          enum:
            - work
            - home
            - personal
          example: "work"
        userId:
          type: string
          description: "The ID of the user who owns this contact"
          example: "67583381326117753aaf9cc4"
  responses:
    200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Operation successful"
    204:
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contact successfully deleted"
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid input data"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized access"
    404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"
