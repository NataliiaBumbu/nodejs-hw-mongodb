openapi: 3.1.0
info:
  version: 1.0.0
  title: Contacts API
  description: API for managing contacts with CRUD operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://nodejs-hw-mongodb-35q8.onrender.com
    description: Production server
tags:
  - name: Contacts
    description: Operations related to contacts
paths:
  /contacts:
    get:
      tags:
        - Contacts
      summary: Retrieve a List of Contacts
      operationId: getContacts
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          example: 1
        - in: query
          name: perPage
          schema:
            type: integer
          example: 10
        - in: query
          name: sortBy
          schema:
            type: string
          example: 'createdAt'
          description: |
            **Sorting Field**
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: ['asc', 'desc']
          example: 'asc'
          description: |
            **Sorting Order**
        - in: query
          name: isFavorite
          schema:
            type: boolean
          example: true
        - in: query
          name: contactType
          schema:
            type: string
            enum: ['work', 'home', 'personal']
          example: personal
      responses:
        '200':
          description: Successfully retrieved contacts
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - message
                  - data
                properties:
                  status:
                    type: integer
                    example: 200
                    description: HTTP status code
                  message:
                    type: string
                    example: Successfully retrieved contacts!
                    description: Confirmation message indicating successful retrieval
                  data:
                    type: object
                    required:
                      - data
                      - page
                      - perPage
                      - totalItems
                      - totalPages
                      - hasNextPage
                      - hasPreviousPage
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: 66cb5f4d0318528063e77c98
                              description: Unique identifier for the contact
                            createdAt:
                              type: string
                              format: date-time
                              example: '2024-12-29T20:39:40.775Z'
                              description: The date and time when the contact was created
                            updatedAt:
                              type: string
                              format: date-time
                              example: '2024-12-29T20:39:40.775Z'
                              description: The date and time when the contact was last updated
                      page:
                        type: integer
                        example: 1
                        description: Current page number
                      perPage:
                        type: integer
                        example: 10
                        description: Number of contacts per page
                      totalItems:
                        type: integer
                        example: 4
                        description: Total number of contacts matching the query
                      totalPages:
                        type: integer
                        example: 1
                        description: Total number of pages available
                      hasNextPage:
                        type: boolean
                        example: false
                        description: Whether there are more pages available after the current page
                      hasPreviousPage:
                        type: boolean
                        example: false
                        description: Whether there are pages available before the current page

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource not found

    post:
      tags:
        - Contacts
      summary: Create a New Contact
      operationId: createContact
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - phoneNumber
                - contactType
              properties:
                name:
                  type: string
                  description: 'The full name of the contact.'
                  example: 'Nik Brook'
                phoneNumber:
                  type: string
                  description: "The contact's phone number, including country code if necessary."
                  example: '+38000000899'
                email:
                  type: string
                  description: "The contact's email address. This is optional."
                  example: 'nik@example.com'
                isFavorite:
                  type: boolean
                  description: 'Indicates whether the contact is marked as a favorite.'
                  example: false
                contactType:
                  type: string
                  description: "The type of the contact. It can be 'work', 'home', or 'personal'."
                  enum: ['work', 'home', 'personal']
                  example: 'personal'
                photo:
                   type: string
                   format: binary
                   description: "The contact's photo file in binary format."
      responses:
        '201':
          description: Contact Successfully Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully created a contact!
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 66cb5f4d0318528063e77c98
                      createdAt:
                        type: string
                        format: date-time
                        example: '2024-12-29T20:39:40.775Z'
                      updatedAt:
                        type: string
                        format: date-time
                        example: '2024-12-29T20:39:40.775Z'

        '400':
          description: Bad Request - Invalid or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: BadRequestError
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Bad request, body parameters are incorrect'
                      errors:
                        type: string
                        example: "'name' is a required field; 'phoneNumber' is a required field; 'contactType' is a required field"

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: InternalServerError
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Failed to save photo, please try again later.'

  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Retrieve a Contact by ID
      operationId: getContact
      description: |
        **Retrieve a specific contact by its unique identifier.**
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: '66cb5f4d0318528063e77c98'
      responses:
        '200':
          description: Successfully found contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found contact with id 66cb5f4d0318528063e77c98!
                  data:
                    type: object

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access

        '404':
          description: Contact Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Contact not found'

    delete:
      tags:
        - Contacts
      summary: Delete an Existing Contact
      operationId: deleteContact
      description: |
        **Delete an Existing Contact**
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'The unique identifier of the contact to be deleted.'
          example: '66cb5f4d0318528063e77c98'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: BadRequestError
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Invalid contactId provided'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access

        '404':
          description: Contact Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Contact not found'
components:
  schemas:
    contact:
      type: object
      required:
        - name
        - phoneNumber
        - contactType
      properties:
        _id:
          type: string
          description: Unique identifier for the contact
          example: "675174e6581cd3520ccd8ca1"
        name:
          type: string
          description: The full name of the contact
          example: 'Test User'
        phoneNumber:
          type: string
          description: The contact's phone number
          example: '+123456789'
        email:
          type: string
          description: The contact's email address
          example: 'test@example.com'
        isFavorite:
          type: boolean
          description: Indicates whether the contact is marked as a favorite
          example: true
        contactType:
          type: string
          description: The category of the contact (e.g., work, home, personal)
          enum:
            - work
            - home
            - personal
          example: 'personal'
        userId:
          type: string
          description: The ID of the user who owns this contact
          example: '67583381326117753aaf9cc4'
        photo:
          type: string
          description: URL to the contact's photo
          example: 'https://res.cloudinary.com/dhkc3livf/image/upload/v1735306214/contacts_photos/vrzest0qncrynauvxubo.jpg'
  responses:
    '201':
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Operation successful
    '204':
      description: No Content
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid input data
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized access
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Resource not found
