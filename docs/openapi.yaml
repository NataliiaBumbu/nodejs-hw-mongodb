openapi: 3.1.0
info:
  version: 1.0.0
  title: Contacts API
  description: API for managing contacts with CRUD operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://nodejs-hw-mongodb-35q8.onrender.com
    description: Production server
tags:
  - name: Contacts
    description: Operations related to contacts
paths:
  /contacts:
    get:
      tags:
        - Contacts
      summary: Get list of contacts
      description: Retrieve a list of contacts with optional query parameters
      parameters:
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            example: 1
          description: Page number for pagination
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            example: 10
          description: Number of contacts per page
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "name"
          description: Field by which to sort contacts
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
    post:
      tags:
        - Contacts
      summary: Create a new contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        '201':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get contact by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Contacts
      summary: Update contact by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Contacts
      summary: Delete contact by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
components:
  schemas:
    Contact:
      type: object
      properties:
        id:
          type: string
          example: "64d72b2c2f1a4c001a7b2d72"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+123456789"
    ContactInput:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+123456789"
  responses:
    200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Operation successful"
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid input data"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized access"
    404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"
